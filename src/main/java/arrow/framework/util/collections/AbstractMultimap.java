/*
 * Copyright (C) 2007 Google Inc. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and limitations under the
 * License.
 */

package arrow.framework.util.collections;

import java.io.Serializable;
import java.util.AbstractCollection;
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.RandomAccess;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;

import arrow.framework.util.AssertUtils;

/**
 * Basic implementation of the {@link Multimap} interface. This class represents a multimap as a map that associates
 * each key with a collection of values. All methods of {@link Multimap} are supported, including those specified as
 * optional in the interface.
 * <p/>
 * <p/>
 * To implement a multimap, a subclass must define the method {@link #createCollection()}, which creates an empty
 * collection of values for a key.
 * <p/>
 * <p/>
 * The multimap constructor takes a map that has a single entry for each distinct key. When you insert a key-value pair
 * with a key that isn't already in the multimap, {@code AbstractMultimap} calls {@link #createCollection()} to create
 * the collection of values for that key. The subclass should not call {@link #createCollection()} directly, and a new
 * instance should be created every time the method is called.
 * <p/>
 * <p/>
 * For example, the subclass could pass a {@link java.util.TreeMap} during construction, and {@link #createCollection()}
 * could return a {@link java.util.TreeSet}, in which case the multimap's iterators would propagate through the keys and
 * values in sorted order.
 * <p/>
 * <p/>
 * Keys and values may be null, as long as the underlying collection classes support null elements.
 * <p/>
 * <p/>
 * The collections created by {@link #createCollection()} may or may not allow duplicates. If the collection, such as a
 * {@link Set}, does not support duplicates, an added key-value pair will replace an existing pair with the same key and
 * value, if such a pair is present. With collections like {@link List} that allow duplicates, the collection will keep
 * the existing key-value pairs while adding a new pair.
 * <p/>
 * <p/>
 * This class is not threadsafe when any concurrent operations update the multimap, even if the underlying map and
 * {@link #createCollection()} method return threadsafe classes. Concurrent read operations will work correctly. To
 * allow concurrent update operations, wrap your multimap with a call to Multimaps#synchronizedMultimap.
 * <p/>
 * <p/>
 * For serialization to work, the subclass must specify explicit {@code readObject} and {@code writeObject} methods.
 *
 * @author Jared Levy
 * @param <K> the key type
 * @param <V> the value type
 */
abstract class AbstractMultimap<K, V> implements Multimap<K, V>, Serializable {
    /*
     * Here's an outline of the overall design.
     *
     * The map variable contains the collection of values associated with each
     * key. When a key-value pair is added to a multimap that didn't previously
     * contain any values for that key, a new collection generated by
     * createCollection is added to the map. That same collection instance
     * remains in the map as long as the multimap has any values for the key. If
     * all values for the key are removed, the key and collection are removed
     * from the map.
     *
     * The get method returns a WrappedCollection, which decorates the collection
     * in the map (if the key is present) or an empty collection (if the key is
     * not present). When the collection delegate in the WrappedCollection is
     * empty, the multimap may contain subsequently added values for that key. To
     * handle that situation, the WrappedCollection checks whether map contains
     * an entry for the provided key, and if so replaces the delegate.
     */

    /** The map. */
    transient Map<K, Collection<V>> map;

    /** The total size. */
    transient int totalSize;

    /**
     * Creates a new multimap that uses the provided map.
     *
     * @param map place to store the mapping from each key to its corresponding values
     * @throws IllegalArgumentException if {@code map} is not empty
     */
    protected AbstractMultimap(final Map<K, Collection<V>> map) {
        AssertUtils.assertTrue(map.isEmpty());
        this.map = map;
    }

    /**
     * Used during deserialization only.
     *
     * @param map the map
     */
    final void setMap(final Map<K, Collection<V>> map) {
        this.map = map;
        this.totalSize = 0;
        for (final Collection<V> values : map.values()) {
            AssertUtils.assertTrue(!values.isEmpty());
            this.totalSize += values.size();
        }
    }

    /**
     * Creates the collection of values for a single key.
     * <p/>
     * <p/>
     * Collections with weak, soft, or phantom references are not supported. Each call to {@code createCollection}
     * should create a new instance.
     * <p/>
     * <p/>
     * The returned collection class determines whether duplicate key-value pairs are allowed.
     *
     * @return an empty collection of values
     */
    abstract Collection<V> createCollection();

    /**
     * Creates the collection of values for an explicitly provided key. By default, it simply calls
     * {@link #createCollection()}, which is the correct behavior for most implementations. The LinkedHashMultimap class
     * overrides it.
     *
     * @param key key to associate with values in the collection
     * @return an empty collection of values
     */
    Collection<V> createCollection(final K key) {
        return this.createCollection();
    }

    /**
     * Backing map.
     *
     * @return the map
     */
    Map<K, Collection<V>> backingMap() {
        return this.map;
    }

    // Query Operations

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#size()
     */
    @Override
    public int size() {
        return this.totalSize;
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#isEmpty()
     */
    @Override
    public boolean isEmpty() {
        return this.totalSize == 0;
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#containsKey(java.lang.Object)
     */
    @Override
    public boolean containsKey(final Object key) {
        return this.map.containsKey(key);
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#containsValue(java.lang.Object)
     */
    @Override
    public boolean containsValue(final Object value) {
        for (final Collection<V> collection : this.map.values()) {
            if (collection.contains(value)) {
                return true;
            }
        }

        return false;
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#containsEntry(java.lang.Object, java.lang.Object)
     */
    @Override
    public boolean containsEntry(final Object key, final Object value) {
        final Collection<V> collection = this.map.get(key);
        return (collection != null) && collection.contains(value);
    }

    // Modification Operations

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#put(java.lang.Object, java.lang.Object)
     */
    @Override
    public boolean put(final K key, final V value) {
        final Collection<V> collection = this.getOrCreateCollection(key);

        if (collection.add(value)) {
            this.totalSize++;
            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Gets the or create collection.
     *
     * @param key the key
     * @return the or create collection
     */
    private Collection<V> getOrCreateCollection(final K key) {
        Collection<V> collection = this.map.get(key);
        if (collection == null) {
            collection = this.createCollection(key);
            this.map.put(key, collection);
        }
        return collection;
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#remove(java.lang.Object, java.lang.Object)
     */
    @Override
    public boolean remove(final Object key, final Object value) {
        final Collection<V> collection = this.map.get(key);
        if (collection == null) {
            return false;
        }

        final boolean changed = collection.remove(value);
        if (changed) {
            this.totalSize--;
            if (collection.isEmpty()) {
                this.map.remove(key);
            }
        }
        return changed;
    }

    // Bulk Operations

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#putAll(java.lang.Object, java.lang.Iterable)
     */
    @Override
    public boolean putAll(final K key, final Iterable<? extends V> values) {
        if (!values.iterator().hasNext()) {
            return false;
        }
        final Collection<V> collection = this.getOrCreateCollection(key);
        final int oldSize = collection.size();

        boolean changed = false;
        if (values instanceof Collection<?>) {
            final Collection<? extends V> c = (Collection<? extends V>) values;
            changed = collection.addAll(c);
        }
        else {
            for (final V value : values) {
                changed |= collection.add(value);
            }
        }

        this.totalSize += (collection.size() - oldSize);
        return changed;
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#putAll(arrow.framework.util.collections.Multimap)
     */
    @Override
    public boolean putAll(final Multimap<? extends K, ? extends V> multimap) {
        boolean changed = false;
        for (final Map.Entry<? extends K, ? extends V> entry : multimap.entries()) {
            changed |= this.put(entry.getKey(), entry.getValue());
        }
        return changed;
    }

    /**
     * {@inheritDoc}
     * <p/>
     * <p/>
     * The returned collection is immutable.
     */
    @Override
    public Collection<V> replaceValues(final K key, final Iterable<? extends V> values) {
        final Iterator<? extends V> iterator = values.iterator();
        if (!iterator.hasNext()) {
            return this.removeAll(key);
        }

        final Collection<V> collection = this.getOrCreateCollection(key);
        final Collection<V> oldValues = this.createCollection();
        oldValues.addAll(collection);

        this.totalSize -= collection.size();
        collection.clear();

        while (iterator.hasNext()) {
            if (collection.add(iterator.next())) {
                this.totalSize++;
            }
        }

        return this.unmodifiableCollectionSubclass(oldValues);
    }

    /**
     * {@inheritDoc}
     * <p/>
     * <p/>
     * The returned collection is immutable.
     */
    @Override
    public Collection<V> removeAll(final Object key) {
        final Collection<V> collection = this.map.remove(key);
        final Collection<V> output = this.createCollection();

        if (collection != null) {
            output.addAll(collection);
            this.totalSize -= collection.size();
            collection.clear();
        }

        return this.unmodifiableCollectionSubclass(output);
    }

    /**
     * Unmodifiable collection subclass.
     *
     * @param collection the collection
     * @return the collection
     */
    private Collection<V> unmodifiableCollectionSubclass(final Collection<V> collection) {
        if (collection instanceof SortedSet<?>) {
            return Collections.unmodifiableSortedSet((SortedSet<V>) collection);
        }
        else if (collection instanceof Set<?>) {
            return Collections.unmodifiableSet((Set<V>) collection);
        }
        else if (collection instanceof List<?>) {
            return Collections.unmodifiableList((List<V>) collection);
        }
        else {
            return Collections.unmodifiableCollection(collection);
        }
    }

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#clear()
     */
    @Override
    public void clear() {
        // Clear each collection, to make previously returned collections empty.
        for (final Collection<V> collection : this.map.values()) {
            collection.clear();
        }
        this.map.clear();
        this.totalSize = 0;
    }

    // Views

    /**
     * {@inheritDoc}
     * <p/>
     * <p/>
     * The returned collection is not serializable.
     */
    @Override
    public Collection<V> get(final K key) {
        Collection<V> collection = this.map.get(key);
        if (collection == null) {
            collection = this.createCollection(key);
        }
        return this.wrapCollection(key, collection);
    }

    /**
     * Generates a decorated collection that remains consistent with the values in the multimap for the provided key.
     * Changes to the multimap may alter the returned collection, and vice versa.
     *
     * @param key the key
     * @param collection the collection
     * @return the collection
     */
    private Collection<V> wrapCollection(final K key, final Collection<V> collection) {
        if (collection instanceof SortedSet<?>) {
            return new WrappedSortedSet(key, (SortedSet<V>) collection, null);
        }
        else if (collection instanceof Set<?>) {
            return new WrappedSet(key, (Set<V>) collection);
        }
        else if (collection instanceof List<?>) {
            return this.wrapList(key, (List<V>) collection, null);
        }
        else {
            return new WrappedCollection<K, V>(this, key, collection, null);
        }
    }

    /**
     * Wrap list.
     *
     * @param key the key
     * @param list the list
     * @param ancestor the ancestor
     * @return the list
     */
    List<V> wrapList(final K key, final List<V> list, final WrappedCollection<K, V> ancestor) {
        return (list instanceof RandomAccess) ? new RandomAccessWrappedList(key, list, ancestor)
                : new WrappedList<K, V>(this, key, list, ancestor);
    }

    /**
     * Iterator or list iterator.
     *
     * @param collection the collection
     * @return the iterator
     */
    Iterator<V> iteratorOrListIterator(final Collection<V> collection) {
        return (collection instanceof List<?>) ? ((List<V>) collection).listIterator() : collection.iterator();
    }

    /**
     * Set decorator that stays in sync with the multimap values for a key.
     */
    private class WrappedSet extends WrappedCollection<K, V> implements Set<V> {

        /**
         * Instantiates a new wrapped set.
         *
         * @param key the key
         * @param delegate the delegate
         */
        WrappedSet(final K key, final Set<V> delegate) {
            super(AbstractMultimap.this, key, delegate, null);
        }
    }

    /**
     * SortedSet decorator that stays in sync with the multimap values for a key.
     */
    private class WrappedSortedSet extends WrappedCollection<K, V> implements SortedSet<V> {

        /**
         * Instantiates a new wrapped sorted set.
         *
         * @param key the key
         * @param delegate the delegate
         * @param ancestor the ancestor
         */
        WrappedSortedSet(final K key, final SortedSet<V> delegate, final WrappedCollection<K, V> ancestor) {
            super(AbstractMultimap.this, key, delegate, ancestor);
        }

        /**
         * Gets the sorted set delegate.
         *
         * @return the sorted set delegate
         */
        SortedSet<V> getSortedSetDelegate() {
            return (SortedSet<V>) this.getDelegate();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#comparator()
         */
        @Override
        public Comparator<? super V> comparator() {
            return this.getSortedSetDelegate().comparator();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#first()
         */
        @Override
        public V first() {
            this.refreshIfEmpty();
            return this.getSortedSetDelegate().first();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#last()
         */
        @Override
        public V last() {
            this.refreshIfEmpty();
            return this.getSortedSetDelegate().last();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#headSet(java.lang.Object)
         */
        @Override
        public SortedSet<V> headSet(final V toElement) {
            this.refreshIfEmpty();
            return new WrappedSortedSet(this.getKey(), this.getSortedSetDelegate().headSet(toElement),
                    (this.getAncestor() == null) ? this : this.getAncestor());
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#subSet(java.lang.Object, java.lang.Object)
         */
        @Override
        public SortedSet<V> subSet(final V fromElement, final V toElement) {
            this.refreshIfEmpty();
            return new WrappedSortedSet(this.getKey(), this.getSortedSetDelegate().subSet(fromElement, toElement),
                    (this.getAncestor() == null) ? this : this.getAncestor());
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#tailSet(java.lang.Object)
         */
        @Override
        public SortedSet<V> tailSet(final V fromElement) {
            this.refreshIfEmpty();
            return new WrappedSortedSet(this.getKey(), this.getSortedSetDelegate().tailSet(fromElement),
                    (this.getAncestor() == null) ? this : this.getAncestor());
        }
    }

    /**
     * List decorator that stays in sync with the multimap values for a key and supports rapid random access.
     */
    private class RandomAccessWrappedList extends WrappedList<K, V> implements RandomAccess {

        /**
         * Instantiates a new random access wrapped list.
         *
         * @param key the key
         * @param delegate the delegate
         * @param ancestor the ancestor
         */
        RandomAccessWrappedList(final K key, final List<V> delegate, final WrappedCollection<K, V> ancestor) {
            super(AbstractMultimap.this, key, delegate, ancestor);
        }
    }

    /** The key set. */
    private transient Set<K> keySet;

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#keySet()
     */
    @Override
    public Set<K> keySet() {
        final Set<K> result = this.keySet;
        return (result == null) ? this.keySet = this.createKeySet() : result;
    }

    /**
     * Creates the key set.
     *
     * @return the sets the
     */
    private Set<K> createKeySet() {
        return (this.map instanceof SortedMap<?, ?>) ? new SortedKeySet((SortedMap<K, Collection<V>>) this.map)
                : new KeySet(this.map);
    }

    /**
     * The Class KeySet.
     */
    private class KeySet extends AbstractSet<K> {

        /**
         * This is usually the same as map, except when someone requests a subcollection of a {@link SortedKeySet}.
         */
        final Map<K, Collection<V>> subMap;

        /**
         * Instantiates a new key set.
         *
         * @param subMap the sub map
         */
        KeySet(final Map<K, Collection<V>> subMap) {
            this.subMap = subMap;
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#size()
         */
        @Override
        public int size() {
            return this.subMap.size();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#iterator()
         */
        @Override
        public Iterator<K> iterator() {
            return new Iterator<K>() {
                final Iterator<Map.Entry<K, Collection<V>>> entryIterator = KeySet.this.subMap.entrySet().iterator();

                Map.Entry<K, Collection<V>> entry;

                @Override
                public boolean hasNext() {
                    return this.entryIterator.hasNext();
                }

                @Override
                public K next() {
                    this.entry = this.entryIterator.next();
                    return this.entry.getKey();
                }

                @Override
                public void remove() {
                    AssertUtils.assertTrue(this.entry != null);
                    final Collection<V> collection = this.entry.getValue();
                    this.entryIterator.remove();
                    AbstractMultimap.this.totalSize -= collection.size();
                    collection.clear();
                }
            };
        }

        // The following methods are included for better performance.

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#contains(java.lang.Object)
         */
        @Override
        public boolean contains(final Object key) {
            return this.subMap.containsKey(key);
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#remove(java.lang.Object)
         */
        @Override
        public boolean remove(final Object key) {
            int count = 0;
            final Collection<V> collection = this.subMap.remove(key);
            if (collection != null) {
                count = collection.size();
                collection.clear();
                AbstractMultimap.this.totalSize -= count;
            }
            return count > 0;
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#containsAll(java.util.Collection)
         */
        @Override
        public boolean containsAll(final Collection<?> items) {
            return this.subMap.keySet().containsAll(items);
        }

        /* (non-Javadoc)
         * @see java.util.AbstractSet#equals(java.lang.Object)
         */
        @Override
        public boolean equals(final Object object) {
            return (this == object) || this.subMap.keySet().equals(object);
        }

        /* (non-Javadoc)
         * @see java.util.AbstractSet#hashCode()
         */
        @Override
        public int hashCode() {
            return this.subMap.keySet().hashCode();
        }
    }

    /**
     * The Class SortedKeySet.
     */
    private class SortedKeySet extends KeySet implements SortedSet<K> {

        /**
         * Instantiates a new sorted key set.
         *
         * @param subMap the sub map
         */
        SortedKeySet(final SortedMap<K, Collection<V>> subMap) {
            super(subMap);
        }

        /**
         * Sorted map.
         *
         * @return the sorted map
         */
        SortedMap<K, Collection<V>> sortedMap() {
            return (SortedMap<K, Collection<V>>) this.subMap;
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#comparator()
         */
        @Override
        public Comparator<? super K> comparator() {
            return this.sortedMap().comparator();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#first()
         */
        @Override
        public K first() {
            return this.sortedMap().firstKey();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#headSet(java.lang.Object)
         */
        @Override
        public SortedSet<K> headSet(final K toElement) {
            return new SortedKeySet(this.sortedMap().headMap(toElement));
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#last()
         */
        @Override
        public K last() {
            return this.sortedMap().lastKey();
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#subSet(java.lang.Object, java.lang.Object)
         */
        @Override
        public SortedSet<K> subSet(final K fromElement, final K toElement) {
            return new SortedKeySet(this.sortedMap().subMap(fromElement, toElement));
        }

        /* (non-Javadoc)
         * @see java.util.SortedSet#tailSet(java.lang.Object)
         */
        @Override
        public SortedSet<K> tailSet(final K fromElement) {
            return new SortedKeySet(this.sortedMap().tailMap(fromElement));
        }
    }

    /** The multiset. */
    private transient Multiset<K> multiset;

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#keys()
     */
    @Override
    public Multiset<K> keys() {
        final Multiset<K> result = this.multiset;
        return (result == null) ? this.multiset = new MultisetView() : result;
    }

    /**
     * Multiset view that stays in sync with the multimap keys.
     */
    private class MultisetView extends AbstractMultiset<K> {

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#remove(java.lang.Object, int)
         */
        @Override
        public int remove(final Object key, final int occurrences) {
            if (occurrences == 0) {
                return this.count(key);
            }
            AssertUtils.assertTrue(occurrences > 0);

            Collection<V> collection;
            try {
                collection = AbstractMultimap.this.map.get(key);
            } catch (final NullPointerException e) {
                return 0;
            } catch (final ClassCastException e) {
                return 0;
            }

            if (collection == null) {
                return 0;
            }
            final int count = collection.size();

            if (occurrences >= count) {
                return AbstractMultimap.this.removeValuesForKey(key);
            }

            final Iterator<V> iterator = collection.iterator();
            for (int i = 0; i < occurrences; i++) {
                iterator.next();
                iterator.remove();
            }
            AbstractMultimap.this.totalSize -= occurrences;
            return count;
        }

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#elementSet()
         */
        @Override
        public Set<K> elementSet() {
            return AbstractMultimap.this.keySet();
        }

        /** The entry set. */
        transient Set<Multiset.Entry<K>> entrySet;

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#entrySet()
         */
        @Override
        public Set<Multiset.Entry<K>> entrySet() {
            final Set<Multiset.Entry<K>> result = this.entrySet;
            return (result == null) ? this.entrySet = new EntrySet() : result;
        }

        /**
         * The Class EntrySet.
         */
        private class EntrySet extends AbstractSet<Multiset.Entry<K>> {

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#iterator()
             */
            @Override
            public Iterator<Multiset.Entry<K>> iterator() {
                return new MultisetEntryIterator();
            }

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#size()
             */
            @Override
            public int size() {
                return AbstractMultimap.this.map.size();
            }

            // The following methods are included for better performance.

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#contains(java.lang.Object)
             */
            @Override
            public boolean contains(final Object obj) {
                if (!(obj instanceof Multiset.Entry<?>)) {
                    return false;
                }
                final Multiset.Entry<?> entry = (Multiset.Entry<?>) obj;
                final Collection<V> collection = AbstractMultimap.this.map.get(entry.getElement());
                return (collection != null) && (collection.size() == entry.getCount());
            }

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#clear()
             */
            @Override
            public void clear() {
                AbstractMultimap.this.clear();
            }

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#remove(java.lang.Object)
             */
            @Override
            public boolean remove(final Object obj) {
                return this.contains(obj)
                        && (AbstractMultimap.this.removeValuesForKey(((Multiset.Entry<?>) obj).getElement()) > 0);
            }
        }

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#iterator()
         */
        @Override
        public Iterator<K> iterator() {
            return new MultisetKeyIterator();
        }

        // The following methods are included for better performance.

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#count(java.lang.Object)
         */
        @Override
        public int count(final Object key) {
            try {
                final Collection<V> collection = AbstractMultimap.this.map.get(key);
                return (collection == null) ? 0 : collection.size();
            } catch (final NullPointerException e) {
                return 0;
            } catch (final ClassCastException e) {
                return 0;
            }
        }

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#size()
         */
        @Override
        public int size() {
            return AbstractMultimap.this.totalSize;
        }

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultiset#clear()
         */
        @Override
        public void clear() {
            AbstractMultimap.this.clear();
        }
    }

    /**
     * Removes all values for the provided key. Unlike {@link #removeAll}, it returns the number of removed mappings.
     *
     * @param key the key
     * @return the int
     */
    private int removeValuesForKey(final Object key) {
        Collection<V> collection;
        try {
            collection = this.map.remove(key);
        } catch (final NullPointerException e) {
            return 0;
        } catch (final ClassCastException e) {
            return 0;
        }

        int count = 0;
        if (collection != null) {
            count = collection.size();
            collection.clear();
            this.totalSize -= count;
        }
        return count;
    }

    /**
     * Iterator across each key, repeating once per value.
     */
    private class MultisetEntryIterator implements Iterator<Multiset.Entry<K>> {

        /** The as map iterator. */
        final Iterator<Map.Entry<K, Collection<V>>> asMapIterator = AbstractMultimap.this.asMap().entrySet().iterator();

        /* (non-Javadoc)
         * @see java.util.Iterator#hasNext()
         */
        @Override
        public boolean hasNext() {
            return this.asMapIterator.hasNext();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#next()
         */
        @Override
        public Multiset.Entry<K> next() {
            return new MultisetEntry(this.asMapIterator.next());
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#remove()
         */
        @Override
        public void remove() {
            this.asMapIterator.remove();
        }
    }

    /**
     * The Class MultisetEntry.
     */
    private class MultisetEntry extends Multisets.AbstractEntry<K> {

        /** The entry. */
        final Map.Entry<K, Collection<V>> entry;

        /**
         * Instantiates a new multiset entry.
         *
         * @param entry the entry
         */
        public MultisetEntry(final Map.Entry<K, Collection<V>> entry) {
            this.entry = entry;
        }

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.Multiset.Entry#getElement()
         */
        @Override
        public K getElement() {
            return this.entry.getKey();
        }

        /* (non-Javadoc)
         * @see arrow.framework.util.collections.Multiset.Entry#getCount()
         */
        @Override
        public int getCount() {
            return this.entry.getValue().size();
        }
    }

    /**
     * Iterator across each key, repeating once per value.
     */
    private class MultisetKeyIterator implements Iterator<K> {

        /** The entry iterator. */
        final Iterator<Map.Entry<K, V>> entryIterator = AbstractMultimap.this.entries().iterator();

        /* (non-Javadoc)
         * @see java.util.Iterator#hasNext()
         */
        @Override
        public boolean hasNext() {
            return this.entryIterator.hasNext();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#next()
         */
        @Override
        public K next() {
            return this.entryIterator.next().getKey();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#remove()
         */
        @Override
        public void remove() {
            this.entryIterator.remove();
        }
    }

    /** The values collection. */
    private transient Collection<V> valuesCollection;

    /**
     * {@inheritDoc}
     * <p/>
     * <p/>
     * The iterator generated by the returned collection traverses the values for one key, followed by the values of a
     * second key, and so on.
     */
    @Override
    public Collection<V> values() {
        final Collection<V> result = this.valuesCollection;
        return (result == null) ? this.valuesCollection = new Values() : result;
    }

    /**
     * The Class Values.
     */
    private class Values extends AbstractCollection<V> {

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#iterator()
         */
        @Override
        public Iterator<V> iterator() {
            return new ValueIterator();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#size()
         */
        @Override
        public int size() {
            return AbstractMultimap.this.totalSize;
        }

        // The following methods are included to improve performance.

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#clear()
         */
        @Override
        public void clear() {
            AbstractMultimap.this.clear();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#contains(java.lang.Object)
         */
        @Override
        public boolean contains(final Object value) {
            return AbstractMultimap.this.containsValue(value);
        }
    }

    /**
     * Iterator across all values.
     */
    private class ValueIterator implements Iterator<V> {

        /** The entry iterator. */
        final Iterator<Map.Entry<K, V>> entryIterator = AbstractMultimap.this.createEntryIterator();

        /* (non-Javadoc)
         * @see java.util.Iterator#hasNext()
         */
        @Override
        public boolean hasNext() {
            return this.entryIterator.hasNext();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#next()
         */
        @Override
        public V next() {
            return this.entryIterator.next().getValue();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#remove()
         */
        @Override
        public void remove() {
            this.entryIterator.remove();
        }
    }

    /** The entries. */
    private transient Collection<Map.Entry<K, V>> entries;

    // TODO: should we copy this javadoc to each concrete class, so that classes
    // like LinkedHashMultimap that need to say something different are still
    // able to {@inheritDoc} all the way from Multimap?

    /**
     * {@inheritDoc}
     * <p/>
     * <p/>
     * The iterator generated by the returned collection traverses the values for one key, followed by the values of a
     * second key, and so on.
     * <p/>
     * <p/>
     * Each entry is an immutable snapshot of a key-value mapping in the multimap, taken at the time the entry is
     * returned by a method call to the collection or its iterator.
     */
    @Override
    public Collection<Map.Entry<K, V>> entries() {
        final Collection<Map.Entry<K, V>> result = this.entries;
        return (this.entries == null) ? this.entries = this.createEntries() : result;
    }

    /**
     * Creates the entries.
     *
     * @return the collection
     */
    private Collection<Map.Entry<K, V>> createEntries() {
        // TODO: can we refactor so we're not doing "this instanceof"?
        return (this instanceof SetMultimap<?, ?>) ? new EntrySet() : new Entries();
    }

    /**
     * Entries for multimap.
     */
    private class Entries extends AbstractCollection<Map.Entry<K, V>> {

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#iterator()
         */
        @Override
        public Iterator<Map.Entry<K, V>> iterator() {
            return AbstractMultimap.this.createEntryIterator();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#size()
         */
        @Override
        public int size() {
            return AbstractMultimap.this.totalSize;
        }

        // The following methods are included to improve performance.

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#contains(java.lang.Object)
         */
        @Override
        public boolean contains(final Object obj) {
            if (!(obj instanceof Map.Entry<?, ?>)) {
                return false;
            }
            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;
            return AbstractMultimap.this.containsEntry(entry.getKey(), entry.getValue());
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#clear()
         */
        @Override
        public void clear() {
            AbstractMultimap.this.clear();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractCollection#remove(java.lang.Object)
         */
        @Override
        public boolean remove(final Object obj) {
            if (!(obj instanceof Map.Entry<?, ?>)) {
                return false;
            }
            final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;
            return AbstractMultimap.this.remove(entry.getKey(), entry.getValue());
        }
    }

    /**
     * Returns an iterator across all key-value map entries, used by {@code entries().iterator()} and
     * {@code values().iterator()}. The default behavior, which traverses the values for one key, the values for a
     * second key, and so on, suffices for most {@code AbstractMultimap} implementations.
     *
     * @return an iterator across map entries
     */
    Iterator<Map.Entry<K, V>> createEntryIterator() {
        return new EntryIterator();
    }

    /**
     * Iterator across all key-value pairs.
     */
    private class EntryIterator implements Iterator<Map.Entry<K, V>> {

        /** The key iterator. */
        final Iterator<Map.Entry<K, Collection<V>>> keyIterator;

        /** The key. */
        K key;

        /** The collection. */
        Collection<V> collection;

        /** The value iterator. */
        Iterator<V> valueIterator;

        /**
         * Instantiates a new entry iterator.
         */
        EntryIterator() {
            this.keyIterator = AbstractMultimap.this.map.entrySet().iterator();
            if (this.keyIterator.hasNext()) {
                this.findValueIteratorAndKey();
            }
            else {
                this.valueIterator = Collections.emptyIterator();
            }
        }

        /**
         * Find value iterator and key.
         */
        void findValueIteratorAndKey() {
            final Map.Entry<K, Collection<V>> entry = this.keyIterator.next();
            this.key = entry.getKey();
            this.collection = entry.getValue();
            this.valueIterator = this.collection.iterator();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#hasNext()
         */
        @Override
        public boolean hasNext() {
            return this.keyIterator.hasNext() || this.valueIterator.hasNext();
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#next()
         */
        @Override
        public Map.Entry<K, V> next() {
            if (!this.valueIterator.hasNext()) {
                this.findValueIteratorAndKey();
            }
            return MapUtils.immutableEntry(this.key, this.valueIterator.next());
        }

        /* (non-Javadoc)
         * @see java.util.Iterator#remove()
         */
        @Override
        public void remove() {
            this.valueIterator.remove();
            if (this.collection.isEmpty()) {
                this.keyIterator.remove();
            }
            AbstractMultimap.this.totalSize--;
        }
    }

    /**
     * Entry set for a {@link SetMultimap}.
     */
    private class EntrySet extends Entries implements Set<Map.Entry<K, V>> {

        /* (non-Javadoc)
         * @see java.lang.Object#equals(java.lang.Object)
         */
        @Override
        public boolean equals(final Object object) {
            if (object instanceof Set<?>) {
                return CollectionUtils.areEquals(this, (Set<?>) object);
            }
            else {
                return false;
            }
        }

        /* (non-Javadoc)
         * @see java.lang.Object#hashCode()
         */
        @Override
        public int hashCode() {
            int hashCode = 0;
            for (final Object o : this) {
                hashCode += o != null ? o.hashCode() : 0;
            }
            return hashCode;
        }
    }

    /** The as map. */
    private transient Map<K, Collection<V>> asMap;

    /* (non-Javadoc)
     * @see arrow.framework.util.collections.Multimap#asMap()
     */
    @Override
    public Map<K, Collection<V>> asMap() {
        final Map<K, Collection<V>> result = this.asMap;
        return (result == null) ? this.asMap = this.createAsMap() : result;
    }

    /**
     * Creates the as map.
     *
     * @return the map
     */
    private Map<K, Collection<V>> createAsMap() {
        return (this.map instanceof SortedMap<?, ?>) ? new SortedAsMap((SortedMap<K, Collection<V>>) this.map)
                : new AsMap(this.map);
    }

    /**
     * The Class AsMap.
     */
    private class AsMap extends AbstractMap<K, Collection<V>> {
        /**
         * Usually the same as map, but smaller for the headMap(), tailMap(), or subMap() of a SortedAsMap.
         */
        final transient Map<K, Collection<V>> submap;

        /**
         * Instantiates a new as map.
         *
         * @param submap the submap
         */
        AsMap(final Map<K, Collection<V>> submap) {
            this.submap = submap;
        }

        /** The entry set. */
        transient Set<Map.Entry<K, Collection<V>>> entrySet;

        /* (non-Javadoc)
         * @see java.util.AbstractMap#entrySet()
         */
        @Override
        public Set<Map.Entry<K, Collection<V>>> entrySet() {
            final Set<Map.Entry<K, Collection<V>>> result = this.entrySet;
            return (this.entrySet == null) ? this.entrySet = new AsMapEntries() : result;
        }

        // The following methods are included for performance.

        /* (non-Javadoc)
         * @see java.util.AbstractMap#containsKey(java.lang.Object)
         */
        @Override
        public boolean containsKey(final Object key) {
            return this.submap.containsKey(key);
        }

        /* (non-Javadoc)
         * @see java.util.AbstractMap#get(java.lang.Object)
         */
        @Override
        public Collection<V> get(final Object key) {
            final Collection<V> collection = this.submap.get(key);
            if (collection == null) {
                return null;
            }
            @SuppressWarnings("unchecked")
            final K k = (K) key;
            return AbstractMultimap.this.wrapCollection(k, collection);
        }

        /* (non-Javadoc)
         * @see java.util.AbstractMap#keySet()
         */
        @Override
        public Set<K> keySet() {
            return AbstractMultimap.this.keySet();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractMap#remove(java.lang.Object)
         */
        @Override
        public Collection<V> remove(final Object key) {
            final Collection<V> collection = this.submap.remove(key);
            if (collection == null) {
                return null;
            }

            final Collection<V> output = AbstractMultimap.this.createCollection();
            output.addAll(collection);
            AbstractMultimap.this.totalSize -= collection.size();
            collection.clear();
            return output;
        }

        /* (non-Javadoc)
         * @see java.util.AbstractMap#equals(java.lang.Object)
         */
        @Override
        public boolean equals(final Object object) {
            return (this == object) || this.submap.equals(object);
        }

        /* (non-Javadoc)
         * @see java.util.AbstractMap#hashCode()
         */
        @Override
        public int hashCode() {
            return this.submap.hashCode();
        }

        /* (non-Javadoc)
         * @see java.util.AbstractMap#toString()
         */
        @Override
        public String toString() {
            return this.submap.toString();
        }

        /**
         * The Class AsMapEntries.
         */
        class AsMapEntries extends AbstractSet<Map.Entry<K, Collection<V>>> {

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#iterator()
             */
            @Override
            public Iterator<Map.Entry<K, Collection<V>>> iterator() {
                return new AsMapIterator();
            }

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#size()
             */
            @Override
            public int size() {
                return AsMap.this.submap.size();
            }

            // The following methods are included for performance.

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#contains(java.lang.Object)
             */
            @Override
            public boolean contains(final Object obj) {
                return AsMap.this.submap.entrySet().contains(obj);
            }

            /* (non-Javadoc)
             * @see java.util.AbstractCollection#remove(java.lang.Object)
             */
            @Override
            public boolean remove(final Object obj) {
                if (!this.contains(obj)) {
                    return false;
                }
                final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj;
                AbstractMultimap.this.removeValuesForKey(entry.getKey());
                return true;
            }
        }

        /**
         * Iterator across all keys and value collections.
         */
        class AsMapIterator implements Iterator<Map.Entry<K, Collection<V>>> {

            /** The delegate iterator. */
            final Iterator<Map.Entry<K, Collection<V>>> delegateIterator = AsMap.this.submap.entrySet().iterator();

            /** The collection. */
            Collection<V> collection;

            /* (non-Javadoc)
             * @see java.util.Iterator#hasNext()
             */
            @Override
            public boolean hasNext() {
                return this.delegateIterator.hasNext();
            }

            /* (non-Javadoc)
             * @see java.util.Iterator#next()
             */
            @Override
            public Map.Entry<K, Collection<V>> next() {
                final Map.Entry<K, Collection<V>> entry = this.delegateIterator.next();
                final K key = entry.getKey();
                this.collection = entry.getValue();
                return MapUtils.immutableEntry(key, AbstractMultimap.this.wrapCollection(key, this.collection));
            }

            /* (non-Javadoc)
             * @see java.util.Iterator#remove()
             */
            @Override
            public void remove() {
                this.delegateIterator.remove();
                AbstractMultimap.this.totalSize -= this.collection.size();
                this.collection.clear();
            }
        }
    }

    /**
     * The Class SortedAsMap.
     */
    private class SortedAsMap extends AsMap implements SortedMap<K, Collection<V>> {

        /**
         * Instantiates a new sorted as map.
         *
         * @param submap the submap
         */
        SortedAsMap(final SortedMap<K, Collection<V>> submap) {
            super(submap);
        }

        /**
         * Sorted map.
         *
         * @return the sorted map
         */
        SortedMap<K, Collection<V>> sortedMap() {
            return (SortedMap<K, Collection<V>>) this.submap;
        }

        /* (non-Javadoc)
         * @see java.util.SortedMap#comparator()
         */
        @Override
        public Comparator<? super K> comparator() {
            return this.sortedMap().comparator();
        }

        /* (non-Javadoc)
         * @see java.util.SortedMap#firstKey()
         */
        @Override
        public K firstKey() {
            return this.sortedMap().firstKey();
        }

        /* (non-Javadoc)
         * @see java.util.SortedMap#lastKey()
         */
        @Override
        public K lastKey() {
            return this.sortedMap().lastKey();
        }

        /* (non-Javadoc)
         * @see java.util.SortedMap#headMap(java.lang.Object)
         */
        @Override
        public SortedMap<K, Collection<V>> headMap(final K toKey) {
            return new SortedAsMap(this.sortedMap().headMap(toKey));
        }

        /* (non-Javadoc)
         * @see java.util.SortedMap#subMap(java.lang.Object, java.lang.Object)
         */
        @Override
        public SortedMap<K, Collection<V>> subMap(final K fromKey, final K toKey) {
            return new SortedAsMap(this.sortedMap().subMap(fromKey, toKey));
        }

        /* (non-Javadoc)
         * @see java.util.SortedMap#tailMap(java.lang.Object)
         */
        @Override
        public SortedMap<K, Collection<V>> tailMap(final K fromKey) {
            return new SortedAsMap(this.sortedMap().tailMap(fromKey));
        }

        /** The sorted key set. */
        SortedSet<K> sortedKeySet;

        // returns a SortedSet, even though returning a Set would be sufficient to
        /* (non-Javadoc)
         * @see arrow.framework.util.collections.AbstractMultimap.AsMap#keySet()
         */
        // satisfy the SortedMap.keySet() interface
        @Override
        public SortedSet<K> keySet() {
            final SortedSet<K> result = this.sortedKeySet;
            return (result == null) ? this.sortedKeySet = new SortedKeySet(this.sortedMap()) : result;
        }
    }

    // Comparison and hashing

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(final Object object) {
        if (object == this) {
            return true;
        }
        if (object instanceof Multimap<?, ?>) {
            final Multimap<?, ?> that = (Multimap<?, ?>) object;
            return this.map.equals(that.asMap());
        }
        return false;
    }

    /**
     * Returns the hash code for this multimap.
     * <p/>
     * <p/>
     * The hash code of a multimap is defined as the hash code of the map view, as returned by {@link Multimap#asMap}.
     *
     * @return the int
     * @see Map#hashCode
     */
    @Override
    public int hashCode() {
        return this.map.hashCode();
    }

    /**
     * Returns a string representation of the multimap, generated by calling {@code toString} on the map returned by
     * {@link Multimap#asMap}.
     *
     * @return a string representation of the multimap
     */
    @Override
    public String toString() {
        return this.map.toString();
    }

}
